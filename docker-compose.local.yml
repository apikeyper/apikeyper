version: "3"
services:
  apikeyper-db:
    image: postgres:latest
    container_name: apikeyper-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    user: postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5438:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d # Mount the initdb scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  apikeyper-redis:
    image: redis:latest
    container_name: apikeyper-redis
    restart: always
    ports:
      - "6379:6379"

  apikeyper-api:
    build:
      context: core
      dockerfile: Dockerfile
    container_name: apikeyper-api
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@apikeyper-db:5432/postgres
      - REDIS_URL=apikeyper-redis:6379
    depends_on:
      apikeyper-db:
        condition: service_healthy

  apikeyper-worker:
    build:
      context: core
      dockerfile: Dockerfile.Worker
    container_name: apikeyper-worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@apikeyper-db:5432/postgres
      - REDIS_URL=apikeyper-redis:6379
    depends_on:
      apikeyper-db:
        condition: service_healthy

  apikeyper-dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile.Web
    container_name: apikeyper-dashboard
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://apikeyper-api:8080
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@apikeyper-db:5432/postgres
    ports:
      - 3000:3000
    depends_on:
      - apikeyper-api

volumes:
  dbdata:
